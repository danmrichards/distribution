// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
    Handler ServerInterface
}

{{range .}}{{$opid := .OperationId}}// {{$opid}} converts mux.Vars to params.
func (siw *ServerInterfaceWrapper) {{.OperationId}} (w http.ResponseWriter, r *http.Request) {
    var err error
{{if .PathParams}}vars := mux.Vars(r){{end}}
{{range .PathParams}}// ------------- Path parameter "{{.ParamName}}" -------------
    var {{$varName := .GoVariableName}}{{$varName}} {{.TypeDef}}
{{if .IsPassThrough}}
    {{$varName}} = vars["{{.ParamName}}"]
{{end}}
{{if .IsJson}}
    err = json.Unmarshal([]byte(vars["{{.ParamName}}"]), &{{$varName}})
    if err != nil {
        util.WriteHTTPResponse(w, http.StatusBadRequest, "Error unmarshaling parameter '{{.ParamName}}' as JSON")
        return
    }
{{end}}
{{if .IsStyled}}
    err = runtime.BindStyledParameter("{{.Style}}",{{.Explode}}, "{{.ParamName}}", vars["{{.ParamName}}"], &{{$varName}})
    if err != nil {
        util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
        return
    }
{{end}}
{{end}}

{{range .SecurityDefinitions}}
    r = r.Clone(context.WithValue(r.Context(), {{.ProviderName | sanitizeGoIdentity | ucFirst}}Scopes, {{toStringArray .Scopes}}))
{{end}}

{{if .RequiresParamObject}}
    // Parameter object where we will unmarshal all parameters from the context
    var params {{.OperationId}}Params
{{range $paramIdx, $param := .QueryParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} query parameter "{{.ParamName}}" -------------
    {{if .IsStyled}}
    err = runtime.BindQueryParameter("{{.Style}}", {{.Explode}}, {{.Required}}, "{{.ParamName}}", r.URL.Query(), &params.{{.GoName}})
    if err != nil {
    	util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
        return
    }
    {{else}}
    if paramValue := r.URL.Query().Get("{{.ParamName}}"); paramValue != "" {
    {{if .IsPassThrough}}
    params.{{.GoName}} = {{if not .Required}}&{{end}}paramValue
    {{end}}
    {{if .IsJson}}
    var value {{.TypeDef}}
    err = json.Unmarshal([]byte(paramValue), &value)
    if err != nil {
        util.WriteHTTPResponse(w, http.StatusBadRequest, "Error unmarshaling parameter '{{.ParamName}}' as JSON")
        return
    }
    params.{{.GoName}} = {{if not .Required}}&{{end}}value
    {{end}}
    }{{if .Required}} else {
    	util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Query argument {{.ParamName}} is required, but not found"))
        return
    }{{end}}
    {{end}}
{{end}}

{{if .HeaderParams}}
    headers := r.Header
{{range .HeaderParams}}// ------------- {{if .Required}}Required{{else}}Optional{{end}} header parameter "{{.ParamName}}" -------------
    if valueList, found := headers[http.CanonicalHeaderKey("{{.ParamName}}")]; found {
        var {{.GoName}} {{.TypeDef}}
        n := len(valueList)
        if n != 1 {
            util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Expected one value for {{.ParamName}}, got %d", n))
            return
        }
{{if .IsPassThrough}}
        params.{{.GoName}} = {{if not .Required}}&{{end}}valueList[0]
{{end}}
{{if .IsJson}}
        err = json.Unmarshal([]byte(valueList[0]), &{{.GoName}})
        if err != nil {
            util.WriteHTTPResponse(w, http.StatusBadRequest, "Error unmarshaling parameter '{{.ParamName}}' as JSON")
            return
        }
{{end}}
{{if .IsStyled}}
        err = runtime.BindStyledParameter("{{.Style}}",{{.Explode}}, "{{.ParamName}}", valueList[0], &{{.GoName}})
        if err != nil {
        	util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
            return
        }
{{end}}
        params.{{.GoName}} = {{if not .Required}}&{{end}}{{.GoName}}
        } {{if .Required}}else {
            util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Header parameter {{.ParamName}} is required, but not found"))
            return
        }{{end}}
{{end}}
{{end}}

{{range .CookieParams}}
    if cookie, err := r.Cookie("{{.ParamName}}"); err == nil {
    {{if .IsPassThrough}}
    params.{{.GoName}} = {{if not .Required}}&{{end}}cookie.Value
    {{end}}
    {{if .IsJson}}
    var value {{.TypeDef}}
    var decoded string
    decoded, err = url.QueryUnescape(cookie.Value)
    if err != nil {
    	util.WriteHTTPResponse(w, http.StatusBadRequest, "Error unescaping cookie parameter '{{.ParamName}}'")
        return
    }
    err = json.Unmarshal([]byte(decoded), &value)
    if err != nil {
        util.WriteHTTPResponse(w, http.StatusBadRequest, "Error unmarshaling parameter '{{.ParamName}}' as JSON")
        return
    }
    params.{{.GoName}} = {{if not .Required}}&{{end}}value
    {{end}}
    {{if .IsStyled}}
    var value {{.TypeDef}}
    err = runtime.BindStyledParameter("simple",{{.Explode}}, "{{.ParamName}}", cookie.Value, &value)
    if err != nil {
        util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter {{.ParamName}}: %s", err))
        return
    }
    params.{{.GoName}} = {{if not .Required}}&{{end}}value
    {{end}}
    }{{if .Required}} else {
        util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Query argument {{.ParamName}} is required, but not found"))
        return
    }{{end}}

{{end}}{{/* .CookieParams */}}

{{end}}{{/* .RequiresParamObject */}}
    {{ if eq (len .Bodies) 0 }}
    // Invoke the callback with all the unmarshalled arguments
    resp, code, err := siw.Handler.{{.OperationId}}(r.Context(){{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}})
    {{ else if eq (len .Bodies) 1 }}
        {{$body := (index .Bodies 0)}}
        var body {{$opid}}JSONBody
        if err := util.ParseRequestBody(r, &body); err != nil {
            util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Error parsing '{{$body.ContentType}}' request body: %s", err))
            return
        }

        // Invoke the callback with all the unmarshalled arguments
        resp, code, err := siw.Handler.{{.OperationId}}(r.Context(){{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}}, body)
    {{else}}
        var resp interface{}
        var code int
        switch r.Header.Get("Content-Type") {
        {{range .Bodies}}
        {{if .Default}}
        default:
        {{else}}
        case "{{.ContentType}}":
        {{end}}
        var body {{$opid}}JSONBody
        if err := util.ParseRequestBody(r, &body); err != nil {
            util.WriteHTTPResponse(w, http.StatusBadRequest, fmt.Sprintf("Error parsing '{{.ContentType}}' request body: %s", err))
            return
        }
        // Invoke the callback with all the unmarshalled arguments
        resp, code, err = siw.Handler.{{.OperationId}}(r.Context(){{genParamNames .PathParams}}{{if .RequiresParamObject}}, params{{end}}, body)
        {{end}}
        }
    {{end}}
    if err != nil {
        util.WriteHTTPResponse(w, http.StatusInternalServerError, fmt.Sprintf("Error handling request: %s", err))
        return
    }

    util.EncodeRequestResponse(w, r, resp, code)

    return
}
{{end}}

